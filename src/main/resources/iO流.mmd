Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# IO流

## o流的简介<br/>    IOStream  流的简介        了解<br/>    IOStream  io流的入门案例   了解<br/>    FILE\.File       类的使用        掌握<br/>    常用流对象                 掌握<br/>    apachieo 包               掌握<br/>  核心出发点就是自己，把数据发送给别人就是输出，让别人把结果给我就是输入<br/>

## inputstream

### 是一个抽象接口，是所有字节输入流的父类

#### fileinputstream<br/>一次返回一个ASCII码

#### bufferInputStream

##### 参数input流

###### 内置数组<br/>同BUFOS公用一个

###### 也可以自定义数组

### 包含方法 close, 和 read<br/>返回0\-255

### input流用于连续二进制文件

## outputstream

### 也是一个抽象接口，是所有字节输出流的父类

#### fileoutputstream

#### 缓冲流<br/>是由包装流效率慢，所以用缓冲流、

##### 缓冲流是缓冲满了<br/>或者手动刷新后，才能把数据写入所需要的敌方

##### buffOuttputStream

###### 参数是output流

####### 内置数组<br/>同BUFIOS共用一个

####### 也可以自定义数组

####### 只要是放到缓存器的流都要flush一下

### 包含方法wirte 和close

### output连续二进制文件

## read
> leftSide=`true`


### 是用于读取字符的抽象类，是父类

#### fileReader，目的是可以读取文本文件

### 有read方法返回0\-65535<br/>一次一个，返回UNICODE码<br/>用CHAR可以看
> leftSide=`true`


#### 连续二进制文件不要用

### 方法close
> leftSide=`true`


## write
> leftSide=`true`


### 也是输出字符流的抽象类，是父类

#### fileWriter，目的是可以写入中文进字符流

#### 由于fileWrite是读一行写一行，会丢掉换行符，所以要手动加入一个换行符<br/>newline\(\)
> leftSide=`true`


#### 记得加上fulush方法

## 转换流
> leftSide=`true`


### inputstreamReader

#### 通过这种转换，把对应的字节流转字符流，为了能够使用buffered的readLine方法，读取一串字符或者普通字符

#### 主要用于system\.in<br/>system\.out
> leftSide=`true`


### outputstreamWritter
> leftSide=`true`


## Printer流
> leftSide=`true`


### 专用于输出字符串的，不管输入进来是什么，自带换行，不用flush

## ByteArrayInputstrea
> leftSide=`true`


### 从数组中读入

## ByteArrayOutputStream
> leftSide=`true`


### 写入数组中

## 数据流
> leftSide=`true`


### DataInpustream

#### 可以让基础类型的数据按对应的格式读入，。<br/>如果是用字节流或者字符流的读入，都要转换一下，才能得到原来的基础数据类型的数据

##### 有对应的写入方法，参数是输入流，可以包装BUFFERED

### dataOutPutStream
> leftSide=`true`


#### 可以让基础数据类型的数据按格式写出，<br/>如果用字符流或者字节流，写出的数据以后要还原还要自己去转换成字节流或者字符流

##### 读取的数据跟写入的数据要一致，参数是输出流，可以包装BUFFERED

##### flush
> leftSide=`true`


## 对象流
> leftSide=`true`


### 也就是各种类的<br/>序列化写入，和反序列读入

### 对象输出流
> leftSide=`true`


#### ObjectOutPutpStream<br/>是一个处理流

##### 参数是一个节点流<br/>可以在参数上套一层buffered

##### 继承seriable
> leftSide=`true`


##### flush
> leftSide=`true`


### 对象输入流
> leftSide=`true`


#### ObjectInputStream<br/>是一个处理流

##### 参数是一个节点流，<br/>可以套BUFFERED

##### 跟data流一样，需要按顺序
> leftSide=`true`


##### 可以不继承seriable
> leftSide=`true`


## 节点流<br/>都是用于直接对接数据源的流

### filedata\.\.<br/>data\.\.\.\.

## 处理流<br/>是对节点流的包装，更灵活的处理节点流 StringBUff StringBUild

## file流<br/>为了对文件进行操作，而对文件的抽象而<br/>形成的一个类，并不属于JAVAIO流

### createnewFile\(path,name\)

### getName

###  getAbsoluteFile\(\)

### exists

### file文件和目录的操作是一致的，除了在创建的时候，默认是当前模块下面开始的的路径<br/>所以要写src/\.\./

## inputsrrea<br/>outputstre<br/>writer<br/>reader<br/>一次都读取一个一个字符或者字节<br/>返回所读取的字节对应的编号

### buffered

#### 对其进行包装可以进行大量的数据传送有<br/>数组，可以一次传送许多数据<br/>字符流 一次读一行写一行/null<br/> 字节流 用一个byte\[\]数组去存取/\-1

### 在Wirter/Reader里面暂存数据用的数组是用char\[\]<br/>在Input/outputStream里面暂存数据用的数组是byte\[\]

### streamToReader/Writer

#### 对处理流进行包装，转换成字符流<br/>是为了更多的方法
